/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/arrow.js":
/*!**********************!*\
  !*** ./src/arrow.js ***!
  \**********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Arrow; });\n/* harmony import */ var _board__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./board */ \"./src/board.js\");\n/* harmony import */ var _monster_sprite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./monster_sprite */ \"./src/monster_sprite.js\");\n/* harmony import */ var _player__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./player */ \"./src/player.js\");\n\r\n\r\n\r\n\r\nclass Arrow {\r\n  constructor(startPos, nextPos, mapPos, direction) {\r\n    this.currentPos = startPos\r\n    this.nextPos = nextPos;\r\n    this.timeStart = 0;\r\n    this.delayMove = 100;\r\n    this.size = [60, 20]; \r\n    this.mapPos = mapPos;\r\n    this.sampleBoard = new _board__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n    this.direction = direction;\r\n    this.lastDir = \"right\"\r\n    this.moving = false;\r\n    this.destroyed = false;\r\n    this.sprites = {\r\n      \"up\": new _monster_sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"./src/images/knightFrames.png\", { 0: { pos: [30, 211], size: [40, 30] },\r\n                                                                   1: { pos: [40, 166], size: [40, 39] },\r\n                                                                   2: { pos: [85, 165], size: [40, 39] }\r\n                                                                  },\r\n                                                                  200), \r\n      \"right\": new _monster_sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"./src/images/knightFrames.png\", { 0: { pos: [32, 183], size: [60, 20] },\r\n                                                                     1: { pos: [40, 166], size: [40, 39] },\r\n                                                                     2: { pos: [85, 165], size: [40, 39] }\r\n                                                                   },\r\n                                                                   200), \r\n      \"down\": new _monster_sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"./src/images/knightFrames.png\", { 0: { pos: [35, 286], size: [40, 30] },\r\n                                                                    1: { pos: [40, 166], size: [40, 39] },\r\n                                                                    2: { pos: [85, 165], size: [40, 39] }\r\n                                                                    },\r\n                                                                    200), \r\n      \"left\": new _monster_sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"./src/images/knightFrames.png\", { 0: { pos: [40, 331], size: [60, 20] },\r\n                                                                    1: { pos: [50, 29], size: [34, 39] },\r\n                                                                    2: { pos: [15, 29], size: [34, 39] }\r\n                                                                    },\r\n                                                                    200)\r\n\r\n    }\r\n    \r\n  }\r\n  \r\n  move(x, y) {\r\n    this.currentPos = [x, y];\r\n    this.nextPos = [x, y];\r\n    this.mapPos = [\r\n      (this.sampleBoard.tileWidth * x) + ((this.sampleBoard.tileWidth - this.size[0]) / 2), \r\n      (this.sampleBoard.tileHeight * y) + ((this.sampleBoard.tileHeight - this.size[1]) / 2)\r\n    ];\r\n  }\r\n\r\n  handleMove(currentTime) {\r\n    if (this.currentPos[0] === this.nextPos[0] && this.currentPos[1] === this.nextPos[1]) return false;\r\n\r\n    if ((currentTime - this.timeStart) >= this.delayMove ) {\r\n      this.move(this.nextPos[0], this.nextPos[1]);\r\n      this.moving = !this.moving\r\n    } else {\r\n      this.getMapPos();\r\n      this.checkDirectionAndAdjust(currentTime);\r\n      this.mapPos[0] = Math.round(this.mapPos[0]);\r\n      this.mapPos[1] = Math.round(this.mapPos[1]);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  getMapPos() {// \r\n    this.mapPos[0] = (this.currentPos[0] * this.sampleBoard.tileWidth) + ((this.sampleBoard.tileWidth - this.size[0]) / 2);\r\n    this.mapPos[1] = (this.currentPos[1] * this.sampleBoard.tileHeight) + ((this.sampleBoard.tileHeight - this.size[1]) / 2);\r\n  }\r\n\r\n  checkDirectionAndAdjust(currentTime) {\r\n    if (this.nextPos[0] !== this.currentPos[0]) {\r\n      let pixelDist = (this.sampleBoard.tileWidth / this.delayMove) * (currentTime - this.timeStart);\r\n\r\n      if (this.nextPos[0] < this.currentPos[0]) {\r\n        this.mapPos[0] += (0 - pixelDist);\r\n      } else {\r\n        this.mapPos[0] += (pixelDist);\r\n      }\r\n    } else {\r\n      let pixelDist = (this.sampleBoard.tileHeight / this.delayMove) * (currentTime - this.timeStart);\r\n\r\n      if (this.nextPos[1] < this.currentPos[1]) {\r\n        this.mapPos[1] += (0 - pixelDist);\r\n      } else {\r\n        this.mapPos[1] += (pixelDist);\r\n      }\r\n    }\r\n  }\r\n\r\n  toIndex(x, y) {\r\n    return ((y * this.sampleBoard.mapWidth) + x);\r\n  }\r\n\r\n  isWalkable(x, y) {\r\n    if (x < 0 || x >= this.sampleBoard.mapWidth || y < 0 || y >= this.sampleBoard.mapHeight) return false;\r\n    if (this.sampleBoard.tileTypes[this.sampleBoard.gameMap[this.toIndex(x, y)]].floor !== this.sampleBoard.floorTypes.walkable) return false; \r\n    return true;\r\n  }\r\n\r\n  canMoveUp() {\r\n    return this.isWalkable(this.currentPos[0], this.currentPos[1] - 1);\r\n  }\r\n\r\n  canMoveDown() {\r\n    return this.isWalkable(this.currentPos[0], this.currentPos[1] + 1);\r\n  }\r\n\r\n  canMoveLeft() {\r\n    return this.isWalkable(this.currentPos[0] - 1, this.currentPos[1]);\r\n  }\r\n\r\n  canMoveRight() {\r\n    return this.isWalkable(this.currentPos[0] + 1, this.currentPos[1]);\r\n  }\r\n\r\n  moveUp(currentGameTime) {\r\n    this.nextPos[1] -= 1;\r\n    this.timeStart = currentGameTime;\r\n    if (this.lastDir === \"left\") this.direction = \"left\";\r\n    this.moving = true;\r\n  }\r\n  \r\n  moveDown(currentGameTime) {\r\n    this.nextPos[1] += 1;\r\n    this.timeStart = currentGameTime;\r\n    if (this.lastDir === \"left\") this.direction = \"left\";\r\n    this.moving = true;\r\n  }\r\n\r\n  moveLeft(currentGameTime) {\r\n    this.nextPos[0] -= 1;\r\n    this.timeStart = currentGameTime;\r\n    this.direction = \"left\";\r\n    this.moving = true; \r\n  }\r\n\r\n  moveRight(currentGameTime) {\r\n    this.nextPos[0] += 1;\r\n    this.timeStart = currentGameTime;\r\n    this.direction = \"right\";\r\n    this.moving = true;\r\n  }\r\n\r\n}\r\n\r\n  // moveUpLeft(currentGameTime) {\r\n  //   this.nextPos[0] -= 1;  NEEDS WORK-ANIMATION\r\n  //   this.nextPos[1] -= 1;\r\n  //   this.timeStart = currentGameTime;\r\n  //   this.direction = \"upLeft\"\r\n  //   this.moving = true;\r\n  // }\r\n  \n\n//# sourceURL=webpack:///./src/arrow.js?");

/***/ }),

/***/ "./src/board.js":
/*!**********************!*\
  !*** ./src/board.js ***!
  \**********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Board; });\n/* harmony import */ var _player__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./player */ \"./src/player.js\");\n/* harmony import */ var _sprite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sprite */ \"./src/sprite.js\");\n\r\n\r\n\r\nclass Board {\r\n  constructor() {\r\n    this.gameBoard = document.getElementById(\"gameBoard\"); \r\n    this.ctx = this.gameBoard.getContext('2d');\r\n    this.gameBoard.width = window.innerWidth;\r\n    this.gameBoard.height = window.innerHeight;\r\n    this.tileWidth = 70;\r\n    this.tileHeight = 70;\r\n    this.mapWidth = 25;\r\n    this.mapHeight = 20;\r\n    this.gameMap =  [\r\n  //   0   1   2   3  4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19 \r\n      20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14,\r\n      28, 21, 21, 21, 29, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14,// 0\r\n      28, 18, 15, 15, 29, 28, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 20, 14, 14, 14, 14, 14,// 1\r\n      28, 16, 12, 14, 21, 21, 18, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 14, 14, 14, 14, 14,// 2\r\n      28, 16, 12, 13, 15, 15, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,// 3\r\n      28, 16, 12, 12, 12, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14,// 4\r\n      28, 16, 14, 14, 14, 14, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14,// 5\r\n      28, 16, 12, 12, 14, 14, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14,// 6\r\n      28, 16, 12, 12, 32, 33, 16, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14,// 7\r\n      30, 21, 21, 21, 31, 30, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 20, 14, 14, 14, 14, 14,// 8\r\n      20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, // 9\r\n      20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, // 9\r\n      20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, // 9\r\n      20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, // 9\r\n      20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14,\r\n      20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14,// 9\r\n      20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, // 9\r\n      20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14,// 9\r\n      20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14,// 9\r\n      20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, // 9\r\n\r\n    ]; \r\n    \r\n    this.viewPort = {\r\n      screen: [0, 0],\r\n      startTile: [0, 0],\r\n      endTile: [0, 0],\r\n      offset: [0, 0],\r\n      update: function(px, py) {\r\n        this.offset[0] = Math.floor((this.screen[0] / 2) - px)\r\n        this.offset[1] = Math.floor((this.screen[1] / 2) - py)\r\n\r\n        let tile = [ Math.floor(px / 70), Math.floor(py / 70) ]\r\n\r\n        this.startTile[0] = tile[0] - 1 - Math.ceil((this.screen[0] / 2) / 70)\r\n        this.startTile[1] = tile[1] - 1 - Math.ceil((this.screen[1] / 2) / 70)\r\n\r\n        if (this.startTile[0] < 0) this.startTile[0] = 0;\r\n        if (this.startTile[1] < 0) this.startTile[1] = 0;\r\n\r\n\r\n        this.endTile[0] = tile[0] + 1 + Math.ceil((this.screen[0] / 2) / 70)\r\n        this.endTile[1] = tile[1] + 1 + Math.ceil((this.screen[1] / 2) / 70)\r\n\r\n        if (this.endTile[0] >= 25) this.endTile[0] = 25 - 1;\r\n        if (this.endTile[1] >= 20) this.endTile[1] = 20 - 1;\r\n      }\r\n    }\r\n    \r\n    this.floorTypes = {\r\n      solid: 0,\r\n      walkable: 1\r\n    };\r\n\r\n\r\n    this.tileTypes = {\r\n      20: { type: \"outOfMap\", floor: this.floorTypes.solid, sprite: new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"./src/images/dungeonTiles.png\", [14, 191], [70, 70]) },\r\n      21: { type: \"xWall\", floor: this.floorTypes.solid, sprite: new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"./src/images/dungeonTiles.png\", [13, 102], [70, 70]) },\r\n      22: { type: \"xWallPillDown\", floor: this.floorTypes.solid, sprite: new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"./src/images/dungeonTiles.png\", [103, 104], [70, 70]) },\r\n      23: { type: \"xWallPillUp\", floor: this.floorTypes.solid, sprite: new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"./src/images/dungeonTiles.png\", [456, 108], [70, 70]) },\r\n      24: { type: \"xWallDoorFrameR\", floor: this.floorTypes.solid, sprite: new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"./src/images/dungeonTiles.png\", [200, 101], [70, 70]) },\r\n      25: { type: \"xWallDoorFrameL\", floor: this.floorTypes.solid, sprite: new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"./src/images/dungeonTiles.png\", [207, 144], [70, 70]) },\r\n      26: { type: \"xDoor\", floor: this.floorTypes.solid, sprite: new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"./src/images/dungeonTiles.png\", [103, 194], [70, 70]) },\r\n      27: { type: \"xWallDecor\", floor: this.floorTypes.solid, sprite: new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"./src/images/dungeonTiles.png\", [165, 106], [70, 70]) },\r\n      28: { type: \"yWallL\", floor: this.floorTypes.solid, sprite: new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"./src/images/dungeonTiles.png\", [623, 107], [70, 70]) },\r\n      29: { type: \"yWallR\", floor: this.floorTypes.solid, sprite: new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"./src/images/dungeonTiles.png\", [539, 106], [70, 70]) },\r\n      // 10: { type: \"yDoor\", floor: this.floorTypes.solid, sprite: new Sprite(\"./src/images/dungeonTiles.png\", [13, 95], [70, 70]) },\r\n      // 11: { type: \"spikes\", floor: this.floorTypes.solid, sprite: new Sprite(\"./src/images/dungeonTiles.png\", [13, 95], [70, 70]) },\r\n      12: { type: \"groundReg\", floor: this.floorTypes.walkable, sprite: new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"./src/images/dungeonTiles.png\", [100, 7], [70, 70]) },\r\n      13: { type: \"groundReg2\", floor: this.floorTypes.walkable, sprite: new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"./src/images/dungeonTiles.png\", [189, 10], [70, 70]) },\r\n      14: { type: \"groundReg3\", floor: this.floorTypes.walkable, sprite: new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"./src/images/dungeonTiles.png\", [370, 12], [70, 70]) },\r\n      15: { type: \"groundTop\", floor: this.floorTypes.walkable, sprite: new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"./src/images/dungeonTiles.png\", [10, 7], [70, 70]) },\r\n      16: { type: \"groundL\", floor: this.floorTypes.walkable, sprite: new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"./src/images/dungeonTiles.png\", [459, 13], [70, 70]) },\r\n      17: { type: \"groundR\", floor: this.floorTypes.walkable, sprite: new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"./src/images/dungeonTiles.png\", [624, 15], [70, 70]) },\r\n      18: { type: \"groundLCorner\", floor: this.floorTypes.walkable, sprite: new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"./src/images/dungeonTiles.png\", [280, 10], [70, 70]) },\r\n      19: { type: \"groundRCorner\", floor: this.floorTypes.walkable, sprite: new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"./src/images/dungeonTiles.png\", [543, 14], [70, 70]) },\r\n      30: { type: \"bottomCornerPillL\", floor: this.floorTypes.solid, sprite: new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"./src/images/dungeonTiles.png\", [194, 196], [70, 70]) },\r\n      31: { type: \"bottomCornerPillR\", floor: this.floorTypes.solid, sprite: new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"./src/images/dungeonTiles.png\", [283, 197], [70, 70]) },\r\n      32: { type: \"bottomCornerUpL\", floor: this.floorTypes.solid, sprite: new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"./src/images/dungeonTiles.png\", [368, 198], [70, 70]) },\r\n      33: { type: \"bottomCornerUpR\", floor: this.floorTypes.solid, sprite: new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"./src/images/dungeonTiles.png\", [455, 198], [70, 70]) }\r\n    };\r\n\r\n    // this.directions = {\r\n    //   up: 0,\r\n    //   right: 1,\r\n    //   down: 2,\r\n    //   left: 3\r\n    // };\r\n  }\r\n\r\n\r\n};\r\n\r\n\r\n\n\n//# sourceURL=webpack:///./src/board.js?");

/***/ }),

/***/ "./src/character_sprite.js":
/*!*********************************!*\
  !*** ./src/character_sprite.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return CharacterSprite; });\nclass CharacterSprite {\r\n  constructor(url, frames, aniTime) {\r\n    this.url = url;\r\n    // this.speed= speed;\r\n    this.frames = frames; \r\n    this.aniTime = aniTime;\r\n  }\r\n  \r\n};\n\n//# sourceURL=webpack:///./src/character_sprite.js?");

/***/ }),

/***/ "./src/game.js":
/*!*********************!*\
  !*** ./src/game.js ***!
  \*********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Game; });\n/* harmony import */ var _player__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./player */ \"./src/player.js\");\n/* harmony import */ var _monster__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./monster */ \"./src/monster.js\");\n/* harmony import */ var _board__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./board */ \"./src/board.js\");\n/* harmony import */ var _keys__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./keys */ \"./src/keys.js\");\n/* harmony import */ var _sprite__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sprite */ \"./src/sprite.js\");\n/* harmony import */ var _arrow__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./arrow */ \"./src/arrow.js\");\n/* harmony import */ var _monster_sprite__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./monster_sprite */ \"./src/monster_sprite.js\");\n/* harmony import */ var _sfxSprite__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./sfxSprite */ \"./src/sfxSprite.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Game {\r\n  constructor() {\r\n    this.board = new _board__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\r\n    this.player = new _player__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n    this.monsters = [];\r\n    this.arrows = [];\r\n    this.keys = _keys__WEBPACK_IMPORTED_MODULE_3__[\"keysDown\"];\r\n    this.currentSecond = 0;\r\n    this.frameCount = 0;\r\n    this.framesLastSecond = 0;\r\n    this.lastFrameTime = 0; \r\n    this.score = 0;\r\n    this.phase = 0;\r\n    this.totalTime = 0\r\n    this.drawGame = this.drawGame.bind(this)\r\n    this.paused = false;\r\n   \r\n    \r\n    \r\n  }\r\n\r\n\r\n  drawGame() {\r\n    let currentFrameTime = Date.now();\r\n    let timeElapsed = currentFrameTime - this.lastFrameTime\r\n    let viewPort = this.board.viewPort\r\n\r\n    let seconds = Math.floor((this.totalTime / 60) % 60)\r\n    let minutes = Math.floor((Math.floor(this.totalTime / 60)) / 60)\r\n    \r\n    let sec = Math.floor(Date.now()/1000);\r\n    if (sec !== this.currentSecond) {\r\n      this.currentSecond = sec;\r\n      this.framesLastSecond = this.frameCount; \r\n      this.frameCount = 1;\r\n    } else {\r\n      this.frameCount++;\r\n      this.totalTime ++;\r\n    }\r\n\r\n   \r\n    \r\n    let possibleSpawns = {\r\n      0: { pos: [16, 2] },\r\n      1: { pos: [6, 7] },\r\n      2: { pos: [5, 6] },\r\n      3: { pos: [13, 7]},\r\n      4: { pos: [4, 3]},\r\n      5: { pos: [1, 7]},\r\n      6: { pos: [18, 3]},\r\n      7: { pos: [18, 5]},\r\n    }\r\n\r\n    let spawnMax \r\n\r\n    switch (this.phase) {\r\n      case 1:\r\n        spawnMax = 4;\r\n        break;\r\n      case 2: \r\n        spawnMax = 6;\r\n        break;\r\n      case 3: \r\n        spawnMax = 8;\r\n      default: \r\n        spawnMax = 2;\r\n    }\r\n\r\n    while (this.monsters.length < spawnMax) {\r\n      let num = Math.floor(Math.random() * 8);\r\n      let monster = new _monster__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\r\n      monster.nextPos = possibleSpawns[num].pos\r\n      this.monsters.push(monster);\r\n    }\r\n\r\n    \r\n    for (let m of this.monsters) {\r\n      if (this.enemyCollision(m)) {\r\n\r\n        let num = Math.floor(Math.random() * 8); \r\n        let monster = new _monster__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\r\n        monster.nextPos = possibleSpawns[num].pos\r\n        this.monsters.push(monster);\r\n        this.score += 100;\r\n      }\r\n    }\r\n    \r\n\r\n    if (this.keys[32] && (currentFrameTime - this.player.lastArrowFired) > this.player.ROF) {\r\n      this.arrows.push(new _arrow__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.player.currentPos, [(this.player.currentPos[0] + this.player.shootDir[this.player.direction][0]), (this.player.currentPos[1] + this.player.shootDir[this.player.direction][1])] , this.player.mapPos, this.player.direction));\r\n      this.player.lastArrowFired = currentFrameTime\r\n      this.keys[32] = false;\r\n      \r\n    }\r\n\r\n\r\n\r\n    if (!this.player.handleMove(currentFrameTime)) {\r\n      this.checkValidMove(currentFrameTime)\r\n    }\r\n    \r\n    viewPort.update(this.player.mapPos[0] + (this.player.size[0] / 2), this.player.mapPos[1] + (this.player.size[1] / 2))\r\n    this.board.ctx.fillStyle = \"#000000\"\r\n\r\n    \r\n    this.board.ctx.fillRect(0, 0, viewPort.screen[0], viewPort.screen[1]) \r\n    for (let y = viewPort.startTile[1]; y < viewPort.endTile[1]; y++) {\r\n      for (let x = viewPort.startTile[0]; x < viewPort.endTile[0]; x++) {\r\n        let tile =  this.board.tileTypes[this.board.gameMap[this.player.toIndex(x, y)]];\r\n        this.board.ctx.drawImage(window.tileset, tile.sprite.pos[0], tile.sprite.pos[1], tile.sprite.size[0], tile.sprite.size[1], (viewPort.offset[0] + (x * this.board.tileWidth)), (viewPort.offset[1] + (y * this.board.tileHeight)), this.board.tileWidth, this.board.tileHeight)\r\n      }\r\n    }\r\n\r\n    let spritePlayer = this.player.sprites[this.player.direction]\r\n    let totalSpriteTime = 0;\r\n\r\n    \r\n\r\n    for (let s in spritePlayer.frames) {\r\n      spritePlayer.frames[s]['start'] = totalSpriteTime;\r\n      totalSpriteTime += spritePlayer.aniTime;\r\n      spritePlayer.frames[s]['end'] = totalSpriteTime;\r\n    }\r\n\r\n    spritePlayer['totalSpriteDuration'] = totalSpriteTime;\r\n    \r\n    let toon = this.getFrame(spritePlayer.frames, spritePlayer.totalSpriteDuration, currentFrameTime, this.player.moving)\r\n    this.board.ctx.drawImage(window.toonSet, toon.pos[0], toon.pos[1], toon.size[0], toon.size[1], (viewPort.offset[0] + this.player.mapPos[0]), (viewPort.offset[1] + this.player.mapPos[1]), this.player.size[0], this.player.size[1])\r\n  \r\n\r\n\r\n\r\n    switch(this.totalTime / 100) {\r\n      case 10:\r\n        this.phase = 1;\r\n        break;\r\n      case 25:\r\n        this.phase = 2;\r\n        break;\r\n      case 45:\r\n        this.phase = 3;\r\n        break;\r\n    }\r\n\r\n  \r\n   \r\n    if (this.arrows.length > 0) {\r\n      for (let arrow of this.arrows) {\r\n        if (!arrow.handleMove(currentFrameTime)) {\r\n          this.arrowCheckValidMove(arrow, currentFrameTime)\r\n        }\r\n      }\r\n    }\r\n\r\n    \r\n\r\n    \r\n    for (let m = 0; m < this.monsters.length; m++) {\r\n      if (!this.monsters[m].handleMove(currentFrameTime)) {\r\n        this.monsterCheckValidMove(this.monsters[m], currentFrameTime)\r\n      }\r\n      let spriteMonster = this.monsters[m].sprites[this.monsters[m].direction];\r\n\r\n      for (let sm in spriteMonster.frames) {\r\n        spriteMonster.frames[sm]['start'] = totalSpriteTime;\r\n        totalSpriteTime += spriteMonster.aniTime;\r\n        spriteMonster.frames[sm]['end'] = totalSpriteTime;\r\n      }\r\n\r\n      spriteMonster['totalSpriteDuration'] = totalSpriteTime;\r\n      let monsterToon = this.getFrame(spriteMonster.frames, spriteMonster.totalSpriteDuration, currentFrameTime, this.monsters[m].moving)\r\n      this.board.ctx.drawImage(window.monsterSet, monsterToon.pos[0], monsterToon.pos[1], monsterToon.size[0], monsterToon.size[1], viewPort.offset[0] + this.monsters[m].mapPos[0], viewPort.offset[1] + this.monsters[m].mapPos[1], this.monsters[m].size[0], this.monsters[m].size[1])\r\n    }\r\n\r\n\r\n\r\n    \r\n    for(let a in this.arrows) {\r\n      let arrowSprite = this.arrows[a];\r\n      let arrowSpriteDir = arrowSprite.sprites[arrowSprite.direction].frames[0]\r\n      \r\n      if (this.arrows.length > 0) {\r\n        if(arrowSprite.destroyed === false) this.board.ctx.drawImage(window.arrowSet, arrowSpriteDir.pos[0], arrowSpriteDir.pos[1], arrowSpriteDir.size[0], arrowSpriteDir.size[1], viewPort.offset[0] + arrowSprite.mapPos[0], viewPort.offset[1] + arrowSprite.mapPos[1], arrowSpriteDir.size[0], arrowSpriteDir.size[1])\r\n      }\r\n    }\r\n\r\n\r\n    for (let m in this.monsters) {\r\n      if (!this.monsters[m].alive) {\r\n        let bloodEffect = new _sfxSprite__WEBPACK_IMPORTED_MODULE_7__[\"default\"]()\r\n        for (let b in bloodEffect.frames) {\r\n          bloodEffect.frames[b]['start'] = totalSpriteTime;\r\n          totalSpriteTime += bloodEffect.aniTime;\r\n          bloodEffect.frames[b]['end'] = totalSpriteTime;\r\n        }\r\n        \r\n        bloodEffect['totalSpriteDuration'] = totalSpriteTime;\r\n        let blood = this.getFrame(bloodEffect.frames, bloodEffect.totalSpriteDuration, currentFrameTime, true)\r\n        \r\n        // let deadMonsterCoord = this.monsters[m].\r\n        this.board.ctx.drawImage(window.bloodSet, blood.pos[0], blood.pos[1], blood.size[0], blood.size[1], viewPort.offset[0] + this.monsters[m].mapPos[0], viewPort.offset[1] + this.monsters[m].mapPos[1], 150, 150)\r\n        \r\n        this.monsters.splice(m, 1)\r\n      }\r\n    }\r\n\r\n    for (let a in this.arrows) {\r\n      if (this.arrows[a].destroyed) this.arrows.splice(a, 1)\r\n    }\r\n\r\n    this.board.ctx.drawImage(window.HUD, 175, 257, 135, 205, 10, 10, 200, 205)\r\n  \r\n   \r\n    \r\n    this.board.ctx.fillStyle = \"#ff0000\";\r\n    this.board.ctx.fillText(this.player.mapPos, 10, 20)\r\n    this.board.ctx.fillText(`FPS: ${this.framesLastSecond}`, 10, 30);\r\n    this.board.ctx.fillText(this.player.currentPos, 10, 50);\r\n    this.board.ctx.fillText(this.score, 10, 70);\r\n    this.board.ctx.fillText(`${minutes} minute(s) ${seconds} seconds`, 10, 80);\r\n\r\n    \r\n    this.lastFrameTime = currentFrameTime;\r\n\r\n    if (!this.paused) {\r\n    requestAnimationFrame(this.drawGame);\r\n    }\r\n    \r\n  \r\n  }\r\n\r\n  \r\n\r\n  \r\n  checkValidMove(currentFrameTime) {\r\n    // if (this.keys[37] && this.keys[38] && this.player.canMoveLeft() && this.player.canMoveUp()) {\r\n    //   this.player.moveUpLeft(currentFrameTime); NEEDS WORK- ANIMATION\r\n    if (this.keys[37] && this.player.canMoveLeft()) {\r\n      this.player.moveLeft(currentFrameTime);\r\n    } else if (this.keys[38] && this.player.canMoveUp()) {\r\n      this.player.moveUp(currentFrameTime);\r\n    } else if (this.keys[39] && this.player.canMoveRight()) {\r\n      this.player.moveRight(currentFrameTime);\r\n    } else if (this.keys[40] && this.player.canMoveDown()) {\r\n      this.player.moveDown(currentFrameTime);\r\n    }\r\n    \r\n\r\n    // viewPort.update(this.player.mapPos[0] + (this.player.size[0] / 2), this.player.mapPos[1] + (this.player.size[1] / 2))\r\n  }\r\n\r\n  monsterCheckValidMove(monster, currentFrameTime) {\r\n    if (monster.canMoveLeft() && (this.player.currentPos[0] < monster.currentPos[0])) {\r\n      monster.moveLeft(currentFrameTime)\r\n    } else if (monster.canMoveUp() && (this.player.currentPos[1] < monster.currentPos[1])) {\r\n      monster.moveUp(currentFrameTime);\r\n    } else if (monster.canMoveRight() && (this.player.currentPos[0] > monster.currentPos[0])) {\r\n      monster.moveRight(currentFrameTime);\r\n    } else if (monster.canMoveDown() && (this.player.currentPos[1] > monster.currentPos[1])) {\r\n      monster.moveDown(currentFrameTime);\r\n    } else if ((this.player.currentPos[1] < monster.currentPos[1] || this.player.currentPos[1] === monster.currentPos[1]) && (!monster.canMoveLeft() || !monster.canMoveRight())) {\r\n      if (!monster.canMoveDown()) {\r\n        monster.moveUp(currentFrameTime);\r\n      } else if (!monster.canMoveUp()) {\r\n        monster.moveDown(currentFrameTime)\r\n      }\r\n    } else if ((this.player.currentPos[1] > monster.currentPos[1] || this.player.currentPos[1] === monster.currentPos[1]) && (!monster.canMoveLeft() || !monster.canMoveRight())) {\r\n      if (monster.canMoveUp()) {\r\n        monster.moveUp(currentFrameTime);\r\n      } else if (monster.canMoveDown()) {\r\n        monster.moveDown(currentFrameTime)\r\n      }\r\n    }  \r\n  }\r\n\r\n  arrowCheckValidMove(arrow, currentFrameTime) {\r\n    if (arrow.direction === \"right\") {\r\n      if (arrow.canMoveRight()) {\r\n        arrow.moveRight(currentFrameTime);\r\n      } else {\r\n        arrow.destroyed = true;\r\n      }\r\n    } else if (arrow.direction === \"left\") {\r\n      if (arrow.canMoveLeft()) {\r\n        arrow.moveLeft(currentFrameTime);\r\n      } else {\r\n        arrow.destroyed = true;\r\n      }\r\n    } else if (arrow.direction === \"up\") {\r\n      if (arrow.canMoveUp()) {\r\n        arrow.moveUp(currentFrameTime);\r\n      } else {\r\n        arrow.destroyed = true;\r\n      }\r\n    } else if (arrow.direction === \"down\") {\r\n      if (arrow.canMoveDown()) {\r\n        arrow.moveDown(currentFrameTime);\r\n      } else {\r\n        arrow.destroyed = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  getFrame(sprites, duration, time, moving) {\r\n    if (!moving) return sprites[0]\r\n    time = time % duration;\r\n    for (let i in sprites) {\r\n      if (sprites[i].end >= time) return sprites[i];\r\n    }\r\n  }\r\n\r\n  enemyCollision(monster) {\r\n      for (let arrow of this.arrows) {\r\n\r\n        if (JSON.stringify(arrow.currentPos) === JSON.stringify(monster.currentPos) && monster.alive) {\r\n          monster.alive = false;\r\n          arrow.destroyed = true;\r\n          return true;\r\n        }\r\n        \r\n      }\r\n  }\r\n\r\n  togglePause() {\r\n    if (!this.paused) {\r\n      this.paused = true;\r\n      this.drawGame()\r\n    } else {\r\n      this.paused= false;\r\n      this.drawGame()\r\n    }\r\n  }\r\n\r\n\r\n};\n\n//# sourceURL=webpack:///./src/game.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _game__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./game */ \"./src/game.js\");\n\r\n\r\nwindow.monsterSet = new Image();\r\nwindow.monsterSet.src = \"./src/images/monsterSet.png\";\r\n\r\nwindow.arrowSet = new Image();\r\nwindow.arrowSet.src = \"./src/images/arrows.png\";\r\n\r\nwindow.tileset = new Image();\r\nwindow.tileset.src = \"./src/images/dungeonTiles.png\"\r\n\r\nwindow.toonSet = new Image();\r\nwindow.toonSet.src = \"./src/images/knightFrames.png\"\r\n\r\nwindow.bloodSet = new Image();\r\nwindow.bloodSet.src = \"./src/images/bloodEffects.png\"\r\n\r\nwindow.HUD = new Image();\r\nwindow.HUD.src = \"./src/images/HUD.png\"\r\n\r\nwindow.backdrop = new Image();\r\nwindow.backdrop.src = \"./src/images/backdrop.png\"\r\n\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n  const play = document.getElementById(\"play\")\r\n  play.addEventListener(\"click\", () => { \r\n    document.querySelectorAll(\".intro\")[0].setAttribute(\"hidden\", \"true\")\r\n    \r\n    let gameMusic = new Audio(\"./src/audio/Resurrections.mp3\")\r\n    gameMusic.play()\r\n    \r\n    let muteButton = document.getElementById(\"mute\")\r\n    let audioButton = document.getElementById(\"audio\");\r\n    audioButton.hidden = false;\r\n    gameMusic.muted = false;\r\n\r\n    audioButton.addEventListener(\"click\", () => {\r\n      gameMusic.muted = !gameMusic.muted\r\n      muteButton.hidden = !muteButton.hidden;\r\n      audioButton.hidden = !audioButton.hidden;\r\n      audioButton.blur()\r\n    })\r\n\r\n    muteButton.addEventListener(\"click\", () => {\r\n      gameMusic.muted = !gameMusic.muted\r\n      muteButton.hidden = !muteButton.hidden;\r\n      audioButton.hidden = !audioButton.hidden;\r\n      muteButton.blur()\r\n    })\r\n    \r\n  \r\n    const game = new _game__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n   \r\n    \r\n    window.addEventListener(\"keydown\", function(e) {\r\n      if (e.keyCode >= 37 && e.keyCode <= 40 || e.keyCode === 32) game.keys[e.keyCode] = true;   \r\n    });\r\n\r\n   \r\n    window.addEventListener(\"keyup\", function(e) {\r\n      if (e.keyCode >= 37 && e.keyCode <= 40 || e.keyCode === 32) game.keys[e.keyCode] = false;   \r\n    });\r\n\r\n    window.addEventListener(\"keydown\", function(e) {\r\n      if (e.keyCode === 80) game.togglePause();\r\n    });\r\n    \r\n    game.board.viewPort.screen = [ game.board.gameBoard.width, game.board.gameBoard.height ]\r\n    \r\n    requestAnimationFrame(game.drawGame);\r\n    \r\n\r\n    \r\n  })\r\n});\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "./src/keys.js":
/*!*********************!*\
  !*** ./src/keys.js ***!
  \*********************/
/*! exports provided: keysDown */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"keysDown\", function() { return keysDown; });\nconst keysDown = {\r\n  37: false,\r\n  38: false,\r\n  39: false,\r\n  40: false,\r\n  32: false,\r\n  67: false\r\n};\n\n//# sourceURL=webpack:///./src/keys.js?");

/***/ }),

/***/ "./src/monster.js":
/*!************************!*\
  !*** ./src/monster.js ***!
  \************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Monster; });\n/* harmony import */ var _board__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./board */ \"./src/board.js\");\n/* harmony import */ var _monster_sprite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./monster_sprite */ \"./src/monster_sprite.js\");\n/* harmony import */ var _player__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./player */ \"./src/player.js\");\n\r\n\r\n\r\n\r\nclass Monster {\r\n  constructor() {\r\n    this.currentPos = [16, 2]\r\n    this.nextPos = [15, 2];\r\n    this.timeStart = 0;\r\n    this.delayMove = 500;\r\n    this.size = [50, 50]; \r\n    this.mapPos = [1130, 150]\r\n    this.sampleBoard = new _board__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n    this.direction = \"right\";\r\n    this.lastDir = \"right\"\r\n    this.moving = false;\r\n    this.alive = true;\r\n    this.sprites = {\r\n      \"up\": new _monster_sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"./src/images/knightFrames.png\", { 0: { pos: [5, 7], size: [35, 39] },\r\n                                                                   1: { pos: [65, 6], size: [40, 39] },\r\n                                                                   2: { pos: [117, 2], size: [40, 39] },\r\n                                                                   3: { pos: [165, 8], size: [40, 39] }\r\n                                                                  },\r\n                                                                  200), \r\n      \"right\": new _monster_sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"./src/images/knightFrames.png\", { 0: { pos: [5, 7], size: [35, 39] },\r\n                                                                     1: { pos: [65, 6], size: [40, 39] },\r\n                                                                     2: { pos: [117, 2], size: [40, 39] },\r\n                                                                     3: { pos: [165, 8], size: [40, 39] }\r\n                                                                   },\r\n                                                                   200), \r\n      \"down\": new _monster_sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"./src/images/knightFrames.png\", { 0: { pos: [5, 7], size: [35, 39] },\r\n                                                                    1: { pos: [65, 6], size: [40, 39] },\r\n                                                                    2: { pos: [117, 2], size: [40, 39] },\r\n                                                                    3: { pos: [165, 8], size: [40, 39] }\r\n                                                                    },\r\n                                                                    200), \r\n      \"left\": new _monster_sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"./src/images/knightFrames.png\", { 0: { pos: [5, 7], size: [40, 39] },\r\n                                                                    1: { pos: [65, 6], size: [34, 39] },\r\n                                                                    2: { pos: [117, 2], size: [34, 39] },\r\n                                                                    3: { pos: [165, 8], size: [40, 39] }\r\n                                                                    },\r\n                                                                    200)\r\n\r\n    }\r\n    \r\n  }\r\n  \r\n  move(x, y) {\r\n    this.currentPos = [x, y];\r\n    this.nextPos = [x, y];\r\n    this.mapPos = [\r\n      (this.sampleBoard.tileWidth * x) + ((this.sampleBoard.tileWidth - this.size[0]) / 2), \r\n      (this.sampleBoard.tileHeight * y) + ((this.sampleBoard.tileHeight - this.size[1]) / 2)\r\n    ];\r\n  }\r\n\r\n  handleMove(currentTime) {\r\n    if (this.currentPos[0] === this.nextPos[0] && this.currentPos[1] === this.nextPos[1]) return false;\r\n\r\n    if ((currentTime - this.timeStart) >= this.delayMove ) {\r\n      this.move(this.nextPos[0], this.nextPos[1]);\r\n      this.moving = !this.moving\r\n    } else {\r\n      this.getMapPos();\r\n      this.checkDirectionAndAdjust(currentTime);\r\n      this.mapPos[0] = Math.round(this.mapPos[0]);\r\n      this.mapPos[1] = Math.round(this.mapPos[1]);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  getMapPos() {// \r\n    this.mapPos[0] = (this.currentPos[0] * this.sampleBoard.tileWidth) + ((this.sampleBoard.tileWidth - this.size[0]) / 2);\r\n    this.mapPos[1] = (this.currentPos[1] * this.sampleBoard.tileHeight) + ((this.sampleBoard.tileHeight - this.size[1]) / 2);\r\n  }\r\n\r\n  checkDirectionAndAdjust(currentTime) {\r\n    if (this.nextPos[0] !== this.currentPos[0]) {\r\n      let pixelDist = (this.sampleBoard.tileWidth / this.delayMove) * (currentTime - this.timeStart);\r\n\r\n      if (this.nextPos[0] < this.currentPos[0]) {\r\n        this.mapPos[0] += (0 - pixelDist);\r\n      } else {\r\n        this.mapPos[0] += (pixelDist);\r\n      }\r\n    } else {\r\n      let pixelDist = (this.sampleBoard.tileHeight / this.delayMove) * (currentTime - this.timeStart);\r\n\r\n      if (this.nextPos[1] < this.currentPos[1]) {\r\n        this.mapPos[1] += (0 - pixelDist);\r\n      } else {\r\n        this.mapPos[1] += (pixelDist);\r\n      }\r\n    }\r\n  }\r\n\r\n  toIndex(x, y) {\r\n    return ((y * this.sampleBoard.mapWidth) + x);\r\n  }\r\n\r\n  isWalkable(x, y) {\r\n    if (x < 0 || x >= this.sampleBoard.mapWidth || y < 0 || y >= this.sampleBoard.mapHeight) return false;\r\n    if (this.sampleBoard.tileTypes[this.sampleBoard.gameMap[this.toIndex(x, y)]].floor !== this.sampleBoard.floorTypes.walkable) return false; \r\n    return true;\r\n  }\r\n\r\n  canMoveUp() {\r\n    return this.isWalkable(this.currentPos[0], this.currentPos[1] - 1);\r\n  }\r\n\r\n  canMoveDown() {\r\n    return this.isWalkable(this.currentPos[0], this.currentPos[1] + 1);\r\n  }\r\n\r\n  canMoveLeft() {\r\n    return this.isWalkable(this.currentPos[0] - 1, this.currentPos[1]);\r\n  }\r\n\r\n  canMoveRight() {\r\n    return this.isWalkable(this.currentPos[0] + 1, this.currentPos[1]);\r\n  }\r\n\r\n  moveUp(currentGameTime) {\r\n    this.nextPos[1] -= 1;\r\n    this.timeStart = currentGameTime;\r\n    if (this.lastDir === \"left\") this.direction = \"left\";\r\n    this.moving = true;\r\n  }\r\n  \r\n  moveDown(currentGameTime) {\r\n    this.nextPos[1] += 1;\r\n    this.timeStart = currentGameTime;\r\n    if (this.lastDir === \"left\") this.direction = \"left\";\r\n    this.moving = true;\r\n  }\r\n\r\n  moveLeft(currentGameTime) {\r\n    this.nextPos[0] -= 1;\r\n    this.timeStart = currentGameTime;\r\n    this.direction = \"left\";\r\n    this.moving = true; \r\n  }\r\n\r\n  moveRight(currentGameTime) {\r\n    this.nextPos[0] += 1;\r\n    this.timeStart = currentGameTime;\r\n    this.direction = \"right\";\r\n    this.moving = true;\r\n  }\r\n\r\n}\r\n\r\n  // moveUpLeft(currentGameTime) {\r\n  //   this.nextPos[0] -= 1;  NEEDS WORK-ANIMATION\r\n  //   this.nextPos[1] -= 1;\r\n  //   this.timeStart = currentGameTime;\r\n  //   this.direction = \"upLeft\"\r\n  //   this.moving = true;\r\n  // }\r\n  \r\n\n\n//# sourceURL=webpack:///./src/monster.js?");

/***/ }),

/***/ "./src/monster_sprite.js":
/*!*******************************!*\
  !*** ./src/monster_sprite.js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return MonsterSprite; });\nclass MonsterSprite {\r\n    constructor(url, frames, aniTime) {\r\n      this.url = url;\r\n      this.frames = frames; \r\n      this.aniTime = aniTime;\r\n    }\r\n    \r\n};\n\n//# sourceURL=webpack:///./src/monster_sprite.js?");

/***/ }),

/***/ "./src/player.js":
/*!***********************!*\
  !*** ./src/player.js ***!
  \***********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Player; });\n/* harmony import */ var _board__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./board */ \"./src/board.js\");\n/* harmony import */ var _character_sprite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./character_sprite */ \"./src/character_sprite.js\");\n\r\n\r\n\r\nclass Player {\r\n  constructor() {\r\n    this.currentPos = [1, 4];\r\n    this.nextPos = [1, 4];\r\n    this.timeStart = 0;\r\n    this.delayMove = 300;\r\n    this.size = [50, 50]; \r\n    this.mapPos = [90, 290];\r\n    this.sampleBoard = new _board__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n    this.direction = \"right\";\r\n    this.shootDir = {\r\n      \"right\": [1, 0],\r\n      \"left\": [-1, 0],\r\n      \"up\": [0, -1],\r\n      \"down\": [0, 1]\r\n    };\r\n    this.lastDir = \"right\"\r\n    this.moving = false;\r\n    this.ROF = 200;\r\n    this.lastArrowFired = 0;\r\n    \r\n    this.sprites = {\r\n      \"up\": new _character_sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"./src/images/knightFrames.png\", { 0: { pos: [1, 84], size: [46, 43] },\r\n                                                                   1: { pos: [57, 83], size: [46, 43] },\r\n                                                                   2: { pos: [111, 85], size: [46, 43] }\r\n                                                                  },\r\n                                                                  200), \r\n      \"right\": new _character_sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"./src/images/knightFrames.png\", { 0: { pos: [5, 160], size: [35, 43] },\r\n                                                                     1: { pos: [40, 159], size: [40, 43] },\r\n                                                                     2: { pos: [85, 157], size: [40, 43] }\r\n                                                                   },\r\n                                                                   200), \r\n      \"down\": new _character_sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"./src/images/knightFrames.png\", { 0: { pos: [11, 220], size: [46, 40] },\r\n                                                                    1: { pos: [81, 220], size: [46, 40] },\r\n                                                                    2: { pos: [162, 217], size: [46, 40] }\r\n                                                                    },\r\n                                                                    200), \r\n      \"left\": new _character_sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"./src/images/knightFrames.png\", { 0: { pos: [83, 15], size: [35, 42] },\r\n                                                                    1: { pos: [46, 13], size: [36, 42] },\r\n                                                                    2: { pos: [10, 15], size: [36, 43] }\r\n                                                                    },\r\n                                                                    200)\r\n\r\n    }\r\n    \r\n  }\r\n\r\n\r\n  move(x, y) {\r\n    this.currentPos = [x, y];\r\n    this.nextPos = [x, y];\r\n    this.mapPos = [\r\n      (this.sampleBoard.tileWidth * x) + ((this.sampleBoard.tileWidth - this.size[0]) / 2), \r\n      (this.sampleBoard.tileHeight * y) + ((this.sampleBoard.tileHeight - this.size[1]) / 2)\r\n    ];\r\n  }\r\n\r\n  handleMove(currentTime) {\r\n    if (this.currentPos[0] === this.nextPos[0] && this.currentPos[1] === this.nextPos[1]) return false;\r\n\r\n    if ((currentTime - this.timeStart) >= this.delayMove ) {\r\n      this.move(this.nextPos[0], this.nextPos[1]);\r\n      this.moving = !this.moving\r\n    } else {\r\n      this.getMapPos();\r\n      this.checkDirectionAndAdjust(currentTime);\r\n      this.mapPos[0] = Math.round(this.mapPos[0]);\r\n      this.mapPos[1] = Math.round(this.mapPos[1]);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  getMapPos() {// \r\n    this.mapPos[0] = (this.currentPos[0] * this.sampleBoard.tileWidth) + ((this.sampleBoard.tileWidth - this.size[0]) / 2);\r\n    this.mapPos[1] = (this.currentPos[1] * this.sampleBoard.tileHeight) + ((this.sampleBoard.tileHeight - this.size[1]) / 2);\r\n  }\r\n\r\n  checkDirectionAndAdjust(currentTime) {\r\n    if (this.nextPos[0] !== this.currentPos[0]) {\r\n      let pixelDist = (this.sampleBoard.tileWidth / this.delayMove) * (currentTime - this.timeStart);\r\n\r\n      if (this.nextPos[0] < this.currentPos[0]) {\r\n        this.mapPos[0] += (0 - pixelDist);\r\n      } else {\r\n        this.mapPos[0] += (pixelDist);\r\n      }\r\n    } else {\r\n      let pixelDist = (this.sampleBoard.tileHeight / this.delayMove) * (currentTime - this.timeStart);\r\n\r\n      if (this.nextPos[1] < this.currentPos[1]) {\r\n        this.mapPos[1] += (0 - pixelDist);\r\n      } else {\r\n        this.mapPos[1] += (pixelDist);\r\n      }\r\n    }\r\n  }\r\n\r\n  toIndex(x, y) {\r\n    return ((y * this.sampleBoard.mapWidth) + x);\r\n  }\r\n\r\n  isWalkable(x, y) {\r\n    if (x < 0 || x >= this.sampleBoard.mapWidth || y < 0 || y >= this.sampleBoard.mapHeight) return false;\r\n    if (this.sampleBoard.tileTypes[this.sampleBoard.gameMap[this.toIndex(x, y)]].floor !== this.sampleBoard.floorTypes.walkable) return false; \r\n    return true;\r\n  }\r\n\r\n  canMoveUp() {\r\n    return this.isWalkable(this.currentPos[0], this.currentPos[1] - 1);\r\n  }\r\n\r\n  canMoveDown() {\r\n    return this.isWalkable(this.currentPos[0], this.currentPos[1] + 1);\r\n  }\r\n\r\n  canMoveLeft() {\r\n    return this.isWalkable(this.currentPos[0] - 1, this.currentPos[1]);\r\n  }\r\n\r\n  canMoveRight() {\r\n    return this.isWalkable(this.currentPos[0] + 1, this.currentPos[1]);\r\n  }\r\n\r\n  moveUp(currentGameTime) {\r\n    this.nextPos[1] -= 1;\r\n    this.timeStart = currentGameTime;\r\n    this.direction = \"up\"\r\n    this.moving = true;\r\n  }\r\n  \r\n  moveDown(currentGameTime) {\r\n    this.nextPos[1] += 1;\r\n    this.timeStart = currentGameTime;\r\n    this.direction = \"down\";\r\n    this.moving = true;\r\n  }\r\n\r\n  moveLeft(currentGameTime) {\r\n    this.nextPos[0] -= 1;\r\n    this.timeStart = currentGameTime;\r\n    this.direction = \"left\";\r\n    this.moving = true; \r\n  }\r\n\r\n  moveRight(currentGameTime) {\r\n    this.nextPos[0] += 1;\r\n    this.timeStart = currentGameTime;\r\n    this.direction = \"right\";\r\n    this.moving = true;\r\n  }\r\n\r\n  // moveUpLeft(currentGameTime) {\r\n  //   this.nextPos[0] -= 1;  NEEDS WORK-ANIMATION\r\n  //   this.nextPos[1] -= 1;\r\n  //   this.timeStart = currentGameTime;\r\n  //   this.direction = \"upLeft\"\r\n  //   this.moving = true;\r\n  // }\r\n\r\n};\r\n\r\n\n\n//# sourceURL=webpack:///./src/player.js?");

/***/ }),

/***/ "./src/sfxSprite.js":
/*!**************************!*\
  !*** ./src/sfxSprite.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return SFXSprite; });\nclass SFXSprite {\r\n    constructor() {\r\n      \r\n      this.frames = {\r\n          0: { pos: [63, 191], size: [80, 80]},\r\n          1: { pos: [176, 60], size: [80, 80]},\r\n          2: { pos: [63, 190], size: [80, 80]},\r\n          3: { pos: [176, 188], size: [80, 80]},\r\n          4: { pos: [63, 312], size: [80, 80]},\r\n          5: { pos: [287, 190], size: [80, 80]},\r\n          6: { pos: [287, 190], size: [80, 80]},\r\n          7: { pos: [287, 190], size: [80, 80]},\r\n          8: { pos: [287, 190], size: [80, 80]},\r\n          9: { pos: [287, 190], size: [80, 80]},\r\n        \r\n      }; \r\n      this.aniTime = 200;\r\n    }\r\n\r\n    \r\n    \r\n};\n\n//# sourceURL=webpack:///./src/sfxSprite.js?");

/***/ }),

/***/ "./src/sprite.js":
/*!***********************!*\
  !*** ./src/sprite.js ***!
  \***********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Sprite; });\nclass Sprite {\r\n  constructor(url, pos, size) {\r\n    this.url = url;\r\n    this.pos = pos;\r\n    this.size = size;\r\n  }\r\n\r\n};\n\n//# sourceURL=webpack:///./src/sprite.js?");

/***/ })

/******/ });